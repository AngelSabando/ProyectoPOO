/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package view;

import controller.TramiteController;
import java.util.Date;
import java.sql.*;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import model.ConexionDB;

/**
 *
 * @author USUARIO
 */
public class GestionTramitesFrame extends javax.swing.JFrame {

    /**
     * Creates new form GestionTramitesFrame
     */
    private DefaultTableModel modeloJudiciales, modeloNotariados, modeloReportes;
    private TramiteController tramiteController;
    private int abogadoId;
    
    public GestionTramitesFrame(int abogadoId) {
        initComponents();
        this.abogadoId = abogadoId;
        tramiteController = new TramiteController();
        setLocationRelativeTo(null);
        
        modeloJudiciales = new DefaultTableModel();
        modeloNotariados = new DefaultTableModel();
        modeloReportes = new DefaultTableModel();

        // Configurar columnas de cada tabla
        modeloJudiciales.setColumnIdentifiers(new String[]{"ID", "Cliente", "Tipo de Trámite", "Descripción", "Estado", "Fecha"});
        modeloNotariados.setColumnIdentifiers(new String[]{"ID", "Cliente", "Tipo de Trámite", "Descripción", "Documentos", "Fecha Inicio", "Fecha Estimada", "Precio"});
        modeloReportes.setColumnIdentifiers(new String[]{"ID", "Cliente", "Tipo de Trámite", "Tipo", "Descripción", "Estado", "Fecha"});

        // Asignar modelos a las tablas
        tablaJudiciales.setModel(modeloJudiciales);
        tablaNotariados.setModel(modeloNotariados);
        tablaReportes.setModel(modeloReportes);

        
        cargarTramitesJudiciales();
        cargarTramitesNotariados();
        cargarReportes();
    }
    
    private void cargarTramitesJudiciales() {
    modeloJudiciales.setRowCount(0); // Limpiar la tabla antes de cargar los datos

    try (Connection con = ConexionDB.conectar();
         PreparedStatement pst = con.prepareStatement("SELECT id, cliente, subtipo_tramite, descripcion, estado, fecha_creacion FROM tramites WHERE abogado_id = ? AND tipo_tramite = 'Judicial'")) {

        pst.setInt(1, abogadoId);
        ResultSet rs = pst.executeQuery();

        while (rs.next()) {
            modeloJudiciales.addRow(new Object[]{
                rs.getInt("id"),
                rs.getString("cliente"),
                rs.getString("subtipo_tramite"), 
                rs.getString("descripcion"),
                rs.getString("estado"),
                rs.getTimestamp("fecha_creacion")
            });
        }
    } catch (SQLException ex) {
        JOptionPane.showMessageDialog(this, "Error al cargar trámites judiciales: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
    }

    tablaJudiciales.setModel(modeloJudiciales); // Asegurar que la tabla usa el modelo actualizado
}


    private void cargarTramitesNotariados() {
        modeloNotariados.setRowCount(0);

        try (Connection con = ConexionDB.conectar(); PreparedStatement pst = con.prepareStatement("SELECT id, cliente, subtipo_tramite, descripcion, documentos, fecha_inicio, fecha_estimada, precio FROM tramites WHERE abogado_id = ? AND tipo_tramite = 'Notariado'")) {

            pst.setInt(1, abogadoId);
            ResultSet rs = pst.executeQuery();

            while (rs.next()) {
                modeloNotariados.addRow(new Object[]{
                    rs.getInt("id"),
                    rs.getString("cliente"),
                    rs.getString("subtipo_tramite"), 
                    rs.getString("descripcion"),
                    rs.getString("documentos"),
                    rs.getDate("fecha_inicio"),
                    rs.getDate("fecha_estimada"),
                    rs.getDouble("precio")
                });
            }
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, "Error al cargar trámites notariados: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }

        tablaNotariados.setModel(modeloNotariados);
    }

    
    private void cargarReportes() {
        modeloReportes.setRowCount(0);
        tramiteController.obtenerTodosLosTramites(modeloReportes, abogadoId);
    }
    
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        tabbedPaneTramites = new javax.swing.JTabbedPane();
        panelJudiciales = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tablaJudiciales = new javax.swing.JTable();
        jPanel1 = new javax.swing.JPanel();
        comboTipoJudicial = new javax.swing.JComboBox<>();
        txtClienteJudicial = new javax.swing.JTextField();
        txtDescripcionJudicial = new javax.swing.JTextField();
        txtDocumentosJudicial = new javax.swing.JTextField();
        txtFechaInicioJudicial = new javax.swing.JTextField();
        txtFechaEstimadaJudicial = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        comboEstadoJudicial = new javax.swing.JComboBox<>();
        jPanel3 = new javax.swing.JPanel();
        btnAgregarJudicial = new javax.swing.JButton();
        btnCerrarSesionJudicial = new javax.swing.JButton();
        btnEliminarTramite = new javax.swing.JButton();
        panelNotariados = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tablaNotariados = new javax.swing.JTable();
        jPanel2 = new javax.swing.JPanel();
        comboTipoNotariado = new javax.swing.JComboBox<>();
        txtClienteNotariado = new javax.swing.JTextField();
        txtDescripcionNotariado = new javax.swing.JTextField();
        txtDocumentosNotariado = new javax.swing.JTextField();
        txtFechaInicioNotariado = new javax.swing.JTextField();
        txtFechaEstimadaNotariado = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        txtPrecioNotariado = new javax.swing.JTextField();
        jPanel4 = new javax.swing.JPanel();
        btnAgregarNotariado = new javax.swing.JButton();
        btnCerrarSesionNotariado = new javax.swing.JButton();
        btnEliminarTramite1 = new javax.swing.JButton();
        panelReportes = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        tablaReportes = new javax.swing.JTable();
        btnActualizarReporte = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        tabbedPaneTramites.setFont(new java.awt.Font("Roboto", 0, 12)); // NOI18N

        panelJudiciales.setLayout(new java.awt.BorderLayout());

        tablaJudiciales.setBackground(new java.awt.Color(118, 145, 154));
        tablaJudiciales.setFont(new java.awt.Font("Roboto", 0, 12)); // NOI18N
        tablaJudiciales.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null}
            },
            new String [] {
                "ID", "Cliente", "Tipo de Trámite", "Descripcion", "Documentos", "Fecha Inicio", "Fecha Estimada", "Estado"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tablaJudiciales);

        panelJudiciales.add(jScrollPane1, java.awt.BorderLayout.CENTER);

        comboTipoJudicial.setFont(new java.awt.Font("Roboto", 0, 12)); // NOI18N
        comboTipoJudicial.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Seleccione", "Divorcio", "Herencia", "Demanda Laboral" }));

        txtClienteJudicial.setFont(new java.awt.Font("Roboto", 0, 12)); // NOI18N

        txtDescripcionJudicial.setFont(new java.awt.Font("Roboto", 0, 12)); // NOI18N

        txtDocumentosJudicial.setFont(new java.awt.Font("Roboto", 0, 12)); // NOI18N

        txtFechaInicioJudicial.setFont(new java.awt.Font("Roboto", 0, 12)); // NOI18N

        txtFechaEstimadaJudicial.setFont(new java.awt.Font("Roboto", 0, 12)); // NOI18N

        jLabel1.setFont(new java.awt.Font("Roboto", 0, 12)); // NOI18N
        jLabel1.setText("Cliente");

        jLabel2.setFont(new java.awt.Font("Roboto", 0, 12)); // NOI18N
        jLabel2.setText("Descripcion");

        jLabel3.setFont(new java.awt.Font("Roboto", 0, 12)); // NOI18N
        jLabel3.setText("Documentos");

        jLabel4.setFont(new java.awt.Font("Roboto", 0, 12)); // NOI18N
        jLabel4.setText("Fecha de Inicio");

        jLabel5.setFont(new java.awt.Font("Roboto", 0, 12)); // NOI18N
        jLabel5.setText("Fecha Estimada");

        jLabel6.setFont(new java.awt.Font("Roboto", 0, 12)); // NOI18N
        jLabel6.setText("Estado");

        comboEstadoJudicial.setFont(new java.awt.Font("Roboto", 0, 12)); // NOI18N
        comboEstadoJudicial.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Seleccione", "Pendiente", "En Proceso", "Finalizado" }));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(comboTipoJudicial, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2)
                    .addComponent(jLabel4)
                    .addComponent(jLabel6)
                    .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, 97, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 195, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(txtFechaEstimadaJudicial, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(txtFechaInicioJudicial, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(txtDocumentosJudicial, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(txtDescripcionJudicial, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(txtClienteJudicial, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(comboEstadoJudicial, 0, 650, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(comboTipoJudicial, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtClienteJudicial, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtDescripcionJudicial, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtDocumentosJudicial, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtFechaInicioJudicial, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtFechaEstimadaJudicial, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(comboEstadoJudicial, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(33, Short.MAX_VALUE))
        );

        panelJudiciales.add(jPanel1, java.awt.BorderLayout.PAGE_START);

        btnAgregarJudicial.setFont(new java.awt.Font("Roboto", 0, 12)); // NOI18N
        btnAgregarJudicial.setText("Agregar Judicial");
        btnAgregarJudicial.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAgregarJudicialActionPerformed(evt);
            }
        });

        btnCerrarSesionJudicial.setFont(new java.awt.Font("Roboto", 0, 12)); // NOI18N
        btnCerrarSesionJudicial.setText("Cerrar Sesion");
        btnCerrarSesionJudicial.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCerrarSesionJudicialActionPerformed(evt);
            }
        });

        btnEliminarTramite.setFont(new java.awt.Font("Roboto", 0, 12)); // NOI18N
        btnEliminarTramite.setText("Eliminar Tramite");
        btnEliminarTramite.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEliminarTramiteActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addComponent(btnAgregarJudicial, javax.swing.GroupLayout.PREFERRED_SIZE, 677, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnEliminarTramite)
                .addGap(18, 18, 18)
                .addComponent(btnCerrarSesionJudicial, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addGap(0, 14, Short.MAX_VALUE)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnAgregarJudicial)
                    .addComponent(btnCerrarSesionJudicial)
                    .addComponent(btnEliminarTramite)))
        );

        panelJudiciales.add(jPanel3, java.awt.BorderLayout.PAGE_END);

        tabbedPaneTramites.addTab("Tramites Judiciales", panelJudiciales);

        panelNotariados.setLayout(new java.awt.BorderLayout());

        tablaNotariados.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null}
            },
            new String [] {
                "ID", "Cliente", "Tipo de Trámite", "Descripción", "Documentos", "Fecha de Inicio", "Fecha Estimada", "Precio"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(tablaNotariados);

        panelNotariados.add(jScrollPane2, java.awt.BorderLayout.CENTER);

        comboTipoNotariado.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Seleccione", "Compra y Venta", "Constitución de Sociedad", "Testamento" }));

        jLabel7.setText("Cliente");

        jLabel8.setText("Descripcion");

        jLabel9.setText("Documentos");

        jLabel10.setText("Fecha de Inicio");

        jLabel11.setText("Fecha Estimada");

        jLabel12.setText("Precio");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(comboTipoNotariado, 0, 954, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel7)
                    .addComponent(jLabel8)
                    .addComponent(jLabel10)
                    .addComponent(jLabel12)
                    .addComponent(jLabel9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel11, javax.swing.GroupLayout.DEFAULT_SIZE, 97, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(txtFechaEstimadaNotariado, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 650, Short.MAX_VALUE)
                    .addComponent(txtFechaInicioNotariado, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(txtDocumentosNotariado, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(txtDescripcionNotariado, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(txtClienteNotariado, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(txtPrecioNotariado))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(comboTipoNotariado, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtClienteNotariado, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtDescripcionNotariado, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtDocumentosNotariado, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel9))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtFechaInicioNotariado, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel10))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtFechaEstimadaNotariado, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel11))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel12)
                    .addComponent(txtPrecioNotariado, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(33, Short.MAX_VALUE))
        );

        panelNotariados.add(jPanel2, java.awt.BorderLayout.PAGE_START);

        btnAgregarNotariado.setText("Agregar Notariado");
        btnAgregarNotariado.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAgregarNotariadoActionPerformed(evt);
            }
        });

        btnCerrarSesionNotariado.setText("Cerrar Sesion");
        btnCerrarSesionNotariado.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCerrarSesionNotariadoActionPerformed(evt);
            }
        });

        btnEliminarTramite1.setText("Eliminar Tramite");
        btnEliminarTramite1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEliminarTramite1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addComponent(btnAgregarNotariado, javax.swing.GroupLayout.DEFAULT_SIZE, 680, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(btnEliminarTramite1)
                .addGap(18, 18, 18)
                .addComponent(btnCerrarSesionNotariado, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addGap(0, 14, Short.MAX_VALUE)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnAgregarNotariado)
                    .addComponent(btnCerrarSesionNotariado)
                    .addComponent(btnEliminarTramite1)))
        );

        panelNotariados.add(jPanel4, java.awt.BorderLayout.PAGE_END);

        tabbedPaneTramites.addTab("Tramites Notariales", panelNotariados);

        panelReportes.setLayout(new java.awt.BorderLayout());

        tablaReportes.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "ID", "Cliente", "Tipo de Trámite", "Tipo", "Descripcion", "Estado", "Fecha"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane3.setViewportView(tablaReportes);

        panelReportes.add(jScrollPane3, java.awt.BorderLayout.CENTER);

        btnActualizarReporte.setText("Actualizar Reporte");
        btnActualizarReporte.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnActualizarReporteActionPerformed(evt);
            }
        });
        panelReportes.add(btnActualizarReporte, java.awt.BorderLayout.PAGE_END);

        tabbedPaneTramites.addTab("Reporte", panelReportes);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(tabbedPaneTramites)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(tabbedPaneTramites, javax.swing.GroupLayout.DEFAULT_SIZE, 600, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnAgregarJudicialActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAgregarJudicialActionPerformed
        // Obtener valores de los campos
        String cliente = txtClienteJudicial.getText().trim();
        String subtipoTramite = (String) comboTipoJudicial.getSelectedItem(); // Obtener el tipo de trámite judicial
        String descripcion = txtDescripcionJudicial.getText().trim();
        String documentos = txtDocumentosJudicial.getText().trim();
        String fechaInicioTexto = txtFechaInicioJudicial.getText().trim();
        String fechaEstimadaTexto = txtFechaEstimadaJudicial.getText().trim();
        String estado = (String) comboEstadoJudicial.getSelectedItem();

        // Validar que los campos no estén vacíos
        if (cliente.isEmpty() || subtipoTramite.equals("Seleccione") || descripcion.isEmpty() || documentos.isEmpty() || fechaInicioTexto.isEmpty() || fechaEstimadaTexto.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Todos los campos son obligatorios.", "Advertencia", JOptionPane.WARNING_MESSAGE);
            return;
        }

        // Convertir fechas
        java.sql.Date fechaInicio = null;
        java.sql.Date fechaEstimada = null;
        try {
            SimpleDateFormat formato = new SimpleDateFormat("yyyy-MM-dd");
            fechaInicio = new java.sql.Date(formato.parse(fechaInicioTexto).getTime());
            fechaEstimada = new java.sql.Date(formato.parse(fechaEstimadaTexto).getTime());
        } catch (ParseException e) {
            JOptionPane.showMessageDialog(this, "Formato de fecha incorrecto. Use YYYY-MM-DD.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Guardar en la base de datos
        if (tramiteController.agregarTramite(abogadoId, cliente, "Judicial", subtipoTramite, descripcion, estado, documentos, fechaInicio, fechaEstimada, null)) {
            JOptionPane.showMessageDialog(this, "Trámite judicial agregado con éxito.");
            cargarTramitesJudiciales();
            limpiarCamposJudicial();
        } else {
            JOptionPane.showMessageDialog(this, "Error al agregar trámite judicial.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnAgregarJudicialActionPerformed

    private void btnAgregarNotariadoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAgregarNotariadoActionPerformed
        // Obtener valores de los campos
        String cliente = txtClienteNotariado.getText().trim();
        String subtipoTramite = (String) comboTipoNotariado.getSelectedItem(); // Obtener el tipo de trámite notariado
        String descripcion = txtDescripcionNotariado.getText().trim();
        String documentos = txtDocumentosNotariado.getText().trim();
        String fechaInicioTexto = txtFechaInicioNotariado.getText().trim();
        String fechaEstimadaTexto = txtFechaEstimadaNotariado.getText().trim();
        String precioTexto = txtPrecioNotariado.getText().trim();

        // Validar que los campos no estén vacíos
        if (cliente.isEmpty() || subtipoTramite.equals("Seleccione") || descripcion.isEmpty() || documentos.isEmpty() || fechaInicioTexto.isEmpty() || fechaEstimadaTexto.isEmpty() || precioTexto.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Todos los campos son obligatorios.", "Advertencia", JOptionPane.WARNING_MESSAGE);
            return;
        }

        // Convertir fechas y precio
        java.sql.Date fechaInicio = null;
        java.sql.Date fechaEstimada = null;
        Double precio = null;

        try {
            SimpleDateFormat formato = new SimpleDateFormat("yyyy-MM-dd");
            fechaInicio = new java.sql.Date(formato.parse(fechaInicioTexto).getTime());
            fechaEstimada = new java.sql.Date(formato.parse(fechaEstimadaTexto).getTime());
        } catch (ParseException e) {
            JOptionPane.showMessageDialog(this, "Formato de fecha incorrecto. Use YYYY-MM-DD.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        try {
            precio = Double.parseDouble(precioTexto);
            if (precio < 0) {
                JOptionPane.showMessageDialog(this, "El precio no puede ser negativo.", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Ingrese un número válido en el campo de precio.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Guardar en la base de datos
        if (tramiteController.agregarTramite(abogadoId, cliente, "Notariado", subtipoTramite, descripcion, "Pendiente", documentos, fechaInicio, fechaEstimada, precio)) {
            JOptionPane.showMessageDialog(this, "Trámite notariado agregado con éxito.");
            cargarTramitesNotariados();
            limpiarCamposNotarial();
        } else {
            JOptionPane.showMessageDialog(this, "Error al agregar trámite notariado.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnAgregarNotariadoActionPerformed

    private void btnCerrarSesionNotariadoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCerrarSesionNotariadoActionPerformed
        // TODO add your handling code here:
        dispose();
        new LoginFrame1().setVisible(true);
    }//GEN-LAST:event_btnCerrarSesionNotariadoActionPerformed

    private void btnCerrarSesionJudicialActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCerrarSesionJudicialActionPerformed
        // TODO add your handling code here:
        dispose();
        new LoginFrame1().setVisible(true);
    }//GEN-LAST:event_btnCerrarSesionJudicialActionPerformed

    private void btnEliminarTramiteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEliminarTramiteActionPerformed
        // TODO add your handling code here:
        int pestañaSeleccionada = tabbedPaneTramites.getSelectedIndex();

        JTable tablaSeleccionada;
        if (pestañaSeleccionada == 0) {
            tablaSeleccionada = tablaJudiciales;
        } else if (pestañaSeleccionada == 1) {
            tablaSeleccionada = tablaNotariados;
        } else {
            JOptionPane.showMessageDialog(this, "Seleccione un trámite en la pestaña correcta.", "Advertencia", JOptionPane.WARNING_MESSAGE);
            return;
        }

        int filaSeleccionada = tablaSeleccionada.getSelectedRow();
        if (filaSeleccionada == -1) {
            JOptionPane.showMessageDialog(this, "Seleccione un trámite para eliminar.", "Advertencia", JOptionPane.WARNING_MESSAGE);
            return;
        }

        int id = (int) tablaSeleccionada.getValueAt(filaSeleccionada, 0);

        int confirmacion = JOptionPane.showConfirmDialog(this, "¿Está seguro de eliminar este trámite?", "Confirmar Eliminación", JOptionPane.YES_NO_OPTION);
        if (confirmacion != JOptionPane.YES_OPTION) {
            return;
        }

        if (tramiteController.eliminarTramite(id)) {
            JOptionPane.showMessageDialog(this, "Trámite eliminado correctamente.");
            if (pestañaSeleccionada == 0) {
                cargarTramitesJudiciales();
                limpiarCamposJudicial();
            } else {
                cargarTramitesNotariados();
                limpiarCamposNotarial();
            }
        } else {
            JOptionPane.showMessageDialog(this, "Error al eliminar trámite.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnEliminarTramiteActionPerformed

    private void btnEliminarTramite1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEliminarTramite1ActionPerformed
        // TODO add your handling code here:
        int pestañaSeleccionada = tabbedPaneTramites.getSelectedIndex();

        JTable tablaSeleccionada;
        if (pestañaSeleccionada == 0) {
            tablaSeleccionada = tablaJudiciales;
        } else if (pestañaSeleccionada == 1) {
            tablaSeleccionada = tablaNotariados;
        } else {
            JOptionPane.showMessageDialog(this, "Seleccione un trámite en la pestaña correcta.", "Advertencia", JOptionPane.WARNING_MESSAGE);
            return;
        }

        int filaSeleccionada = tablaSeleccionada.getSelectedRow();
        if (filaSeleccionada == -1) {
            JOptionPane.showMessageDialog(this, "Seleccione un trámite para eliminar.", "Advertencia", JOptionPane.WARNING_MESSAGE);
            return;
        }

        int id = (int) tablaSeleccionada.getValueAt(filaSeleccionada, 0);

        int confirmacion = JOptionPane.showConfirmDialog(this, "¿Está seguro de eliminar este trámite?", "Confirmar Eliminación", JOptionPane.YES_NO_OPTION);
        if (confirmacion != JOptionPane.YES_OPTION) {
            return;
        }

        if (tramiteController.eliminarTramite(id)) {
            JOptionPane.showMessageDialog(this, "Trámite eliminado correctamente.");
            if (pestañaSeleccionada == 0) {
                cargarTramitesJudiciales();
                limpiarCamposJudicial();
            } else {
                cargarTramitesNotariados();
                limpiarCamposNotarial();
            }
        } else {
            JOptionPane.showMessageDialog(this, "Error al eliminar trámite.", "Error", JOptionPane.ERROR_MESSAGE);
        }
        
    }//GEN-LAST:event_btnEliminarTramite1ActionPerformed

    private void btnActualizarReporteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnActualizarReporteActionPerformed
        // TODO add your handling code here:
        cargarReportes();
    }//GEN-LAST:event_btnActualizarReporteActionPerformed

    private void limpiarCamposJudicial() {
        txtClienteJudicial.setText("");
        txtDescripcionJudicial.setText("");
        txtDocumentosJudicial.setText("");
        txtFechaInicioJudicial.setText("");
        txtFechaEstimadaJudicial.setText("");
        comboEstadoJudicial.setSelectedIndex(0);
        comboTipoJudicial.setSelectedIndex(0);
    }
    
    private void limpiarCamposNotarial() {
        txtClienteNotariado.setText("");
        txtDescripcionNotariado.setText("");
        txtDocumentosNotariado.setText("");
        txtFechaInicioNotariado.setText("");
        txtFechaEstimadaNotariado.setText("");
        txtPrecioNotariado.setText("");
        comboTipoNotariado.setSelectedIndex(0);
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GestionTramitesFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GestionTramitesFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GestionTramitesFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GestionTramitesFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GestionTramitesFrame(1).setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnActualizarReporte;
    private javax.swing.JButton btnAgregarJudicial;
    private javax.swing.JButton btnAgregarNotariado;
    private javax.swing.JButton btnCerrarSesionJudicial;
    private javax.swing.JButton btnCerrarSesionNotariado;
    private javax.swing.JButton btnEliminarTramite;
    private javax.swing.JButton btnEliminarTramite1;
    private javax.swing.JComboBox<String> comboEstadoJudicial;
    private javax.swing.JComboBox<String> comboTipoJudicial;
    private javax.swing.JComboBox<String> comboTipoNotariado;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JPanel panelJudiciales;
    private javax.swing.JPanel panelNotariados;
    private javax.swing.JPanel panelReportes;
    private javax.swing.JTabbedPane tabbedPaneTramites;
    private javax.swing.JTable tablaJudiciales;
    private javax.swing.JTable tablaNotariados;
    private javax.swing.JTable tablaReportes;
    private javax.swing.JTextField txtClienteJudicial;
    private javax.swing.JTextField txtClienteNotariado;
    private javax.swing.JTextField txtDescripcionJudicial;
    private javax.swing.JTextField txtDescripcionNotariado;
    private javax.swing.JTextField txtDocumentosJudicial;
    private javax.swing.JTextField txtDocumentosNotariado;
    private javax.swing.JTextField txtFechaEstimadaJudicial;
    private javax.swing.JTextField txtFechaEstimadaNotariado;
    private javax.swing.JTextField txtFechaInicioJudicial;
    private javax.swing.JTextField txtFechaInicioNotariado;
    private javax.swing.JTextField txtPrecioNotariado;
    // End of variables declaration//GEN-END:variables
}
